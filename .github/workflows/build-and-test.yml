name: Build and Test
on: [push]

env:
  CONAN_VERSION: 2.7.1

jobs:
  Build-And-Test:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      # Workaround for "error: externally-managed-environment" when installing Conan.
      # See https://stackoverflow.com/questions/75608323/how-do-i-solve-error-externally-managed-environment-every-time-i-use-pip-3
      - name: Allow `--break-system-packages` for pip
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          mkdir -p ~/.config/pip
          cd ~/.config/pip
          echo "[global]" >pip.conf
          echo "break-system-packages = true" >>pip.conf
      - name: Install Conan
        uses: turtlebrowser/get-conan@main
        with:
          version: ${{ env.CONAN_VERSION }}
      - name: Enable gcc-12
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 60
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-12 60
          sudo update-alternatives --set gcc /usr/bin/gcc-12
          sudo update-alternatives --set g++ /usr/bin/g++-12
          gcc --version
          g++ --version
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Build conan dependencies
        shell: bash
        run: ./1_build_conan_deps.sh
      - name: Configure project
        shell: bash
        run: ./2_config_build_install_test.sh config
      - name: Build & install project
        shell: bash
        run: ./2_config_build_install_test.sh build_install
      - name: Test
        shell: bash
        run: ./2_config_build_install_test.sh test
      - name: Debug Windows
        shell: bash
        run: |
          pwd
          echo "ls -l i"
          ls -l i
          echo "ls -l i/lib"
          ls -l i/lib
          echo "ls -l i/lib/cmake"
          ls -l i/lib/cmake
          echo "ls -l i/lib/cmake/sqlitecpp-thin"
          ls -l i/lib/cmake/sqlitecpp-thin
      - name: Build and test installed library.
        shell: bash
        run: ./3_test-installed-lib.sh
